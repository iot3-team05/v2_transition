iot3: 2.0.0
info:
  name: CommScope ION-U
  oem: CommScope
  model: ION-U
  versions:
    - "1.95"
  description: CommScope ION-U
  author: Kiara L'Herpiniere <support@qeleo.com>
  stage: alpha
  revision: 2
  labels:
    - 'Topology: version needs to be hard coded, xpath to be refined'
    - JSON -> XML trouble with making xpath for topology
    - only seen a few alarms
    - auto upgraded to v2
  created: "2021-08-23"
  updated: "2022-12-07"
registration:
  vaultId: vault_id
  fingerprint:
    - ip
    - port
    - vault_id
  vault:
    properties:
      password:
        key: password
        placeholder: Password
        required: true
        title: Password
        type: string
      username:
        key: username
        placeholder: Username
        required: true
        title: Username
        type: string
    required:
      - username
      - password
  form:
    properties:
      ip:
        key: ip
        placeholder: IP Address
        required: true
        title: IP
        type: string
      port:
        inputType: number
        key: port
        maximum: 65535
        minimum: 0
        placeholder: Port
        required: true
        title: Port
        type: number
      vault_id:
        key: vault_id
        pattern: ^(cu\w{6})(-av\w{6})$
        placeholder: Vault ID
        required: true
        title: Vault ID
        type: string
    required:
      - ip
      - port
      - vault_id
engines:
  tunnel:
    ssh:
      supported: false
    http:
      supported: true
  upgraded-http:
    schedule: '@always'
    auth: '%{resources.auths.upgraded-http}'
    type: HTTP
    options:
      tls:
        minVersion: "1.0"
topology:
  rootType: smhw
  verify:
    - dataEngine: '%{engines.upgraded-http}'
      selector:
        type: xpath
        expression: ""
      match: ""
  nodes: true
  discovery:
    dataEngine: '%{engines.upgraded-http}'
    dataSource: '%{resources.http.requests.get_tree}'
    type: http
    selectors:
      nodes:
        dataEngine: '%{engines.upgraded-http}'
        selector:
          type: xpath
          expression: //classes[text() ="isDevice"]/..
    flatten:
      type:
        filters:
          1: xpath //type/text()
          2: use %{1}
          3: "switch\n\"%{2}\" ~= \"^rmc.*\" : \"smhw\"\n\"%{2}\" ~= \"^ifc.*\" : \"ifc\"\n\"%{2}\" ~= \".*poi.*\" : \"poi\"                  \n\"%{2}\" ~= \"^src.*\" : \"src\"\n\"%{2}\" ~= \".*matrix.*\" : \"smtx\"              \n\"%{2}\" ~= \".*split.*\" : \"osplt\"              \n\"%{2}\" ~= \"^zone.*\" : \"zcmb\"                \n\"%{2}\" ~= \"^pdu.*\" : \"pdu\"\n\"%{2}\" ~= \".*otrx.*\" : \"otrx\"                \n\"%{2}\" ~= \"^remote.*\" : \"ru\"                    \ndefault:\"\"\n"
      topology:
        transform: ${topology.discovery.selectors.nodes}
        filters:
          1: xpath //fqdn/text()
          2: use %{1}
          3: regexpExtract /(\.rack\d+)/ => $1
          4: use %{3}
          5: regexpReplace /(.rack)/ => ''
          6: use %{1}
          7: regexpExtract /(\.subrack\d+)/ => $1
          8: use %{7}
          9: regexpReplace /(.subrack)/ => ''
          10: use %{1}
          11: regexpExtract /(slot\d+)/ => $1
          12: use %{11}
          13: regexpReplace /(slot)/ => ''
          14: use %{1}
          15: regexpExtract /(ru-\d+)/ => $1
          16: use %{15}
          17: regexpReplace /(ru-)/ => ''
          18: use %{0}
          19: xpath //type/text()
          20: use %{19}
          21: "switch\n\"%{20}\" ~= \"^rmc.*\" : \"smhw\"\n\"%{20}\" ~= \"^ifc.*\" : \"ifc\"\n\"%{20}\" ~= \".*poi.*\" : \"poi\"                  \n\"%{20}\" ~= \"^src.*\" : \"src\"\n\"%{20}\" ~= \".*matrix.*\" : \"smtx\"              \n\"%{20}\" ~= \".*split.*\" : \"osplt\"              \n\"%{20}\" ~= \"^zone.*\" : \"zcmb\"                \n\"%{20}\" ~= \"^pdu.*\" : \"pdu\"\n\"%{20}\" ~= \".*otrx.*\" : \"otrx\"                \n\"%{20}\" ~= \"^remote.*\" : \"ru\"                    \ndefault:\"\"\n"
          22: "switch\n\"%{21}\" == \"smhw\" : \"'system' -> 'smhw'\" \n\"%{21}\" == \"ifc\" : \"'system' -> 'rack [%{5}]' -> 'subrack [%{9}]' -> 'ifc [%{13}]'\"\n\"%{21}\" == \"poi\" : \"'system' -> 'rack [%{5}]' -> 'subrack [%{9}]' -> 'poi [%{13}]'\"\n\"%{21}\" == \"src\" : \"'system' -> 'rack [%{5}]' -> 'subrack [%{9}]' -> 'src [%{13}]'\"\n\"%{21}\" == \"smtx\" : \"'system' -> 'rack [%{5}]' -> 'subrack [%{9}]' -> 'smtx [%{13}]'\"\n\"%{21}\" == \"osplt\" : \"'system' -> 'rack [%{5}]' -> 'subrack [%{9}]' -> 'osplt [%{13}]'\"\n\"%{21}\" == \"zcmb\" : \"'system' -> 'rack [%{5}]' -> 'subrack [%{9}]' -> 'zcmb [%{13}]'\"\n\"%{21}\" == \"pdu\" : \"'system' -> 'rack [%{5}]' -> 'subrack [%{9}]' -> 'pdu [%{13}]'\"\n\"%{21}\" == \"otrx\" : \"'system' -> 'rack [%{5}]' -> 'subrack [%{9}]' -> 'otrx [%{13}]'\"\n\"%{21}\" == \"ru\" : \"'system' -> 'rack [%{5}]' -> 'subrack [%{9}]' -> 'otrx [%{13}]' -> 'ru [%{17}]'\"\ndefaults: \"'smhw\"\n"
      version:
        transform: ${topology.discovery.topology.discovery.selectors.nodes}
        filters:
          1: xpath //version/text()
          2: regexpExtract /^\d{1}+[.]+\d{2}/ => $1
      loco:
        transform: ${topology.discovery.topology.discovery.selectors.nodes}
        filters:
          1: xpath //fqdn/text()
      rack:
        transform: ${topology.discovery.topology.discovery.selectors.nodes}
        filters:
          1: xpath //fqdn/text()
          2: use %{1}
          3: regexpExtract /(\.rack\d+)/ => $1
          4: use %{3}
          5: regexpReplace /(.rack)/ => ''
      ruNum:
        transform: ${topology.discovery.topology.discovery.selectors.nodes}
        filters:
          1: xpath //fqdn/text()
          2: use %{1}
          3: regexpExtract /(ru-\d+)/ => $1
          4: use %{3}
          5: regexpReplace /(ru-)/ => ''
      slot:
        transform: ${topology.discovery.topology.discovery.selectors.nodes}
        filters:
          1: xpath //fqdn/text()
          2: use %{1}
          3: regexpExtract /(slot\d+)/ => $1
          4: use %{3}
          5: regexpReplace /(slot)/ => ''
      subrack:
        transform: ${topology.discovery.topology.discovery.selectors.nodes}
        filters:
          1: xpath //fqdn/text()
          2: use %{1}
          3: regexpExtract /(\.subrack\d+)/ => $1
          4: use %{3}
          5: regexpReplace /(.subrack)/ => ''
types:
  ifc:
    name: IFC
    version: '[1.3,)'
    reference: ifc
    attributes:
      - ifc_id
      - ifc_serial
      - ifc_type
      - ifc_hw_version
      - ifc_sw_version
      - ifc_name
      - ifc_location
      - ifc_coverageArea
      - ifc_longitude
      - ifc_latitude
      - ifc_altitude
    price:
      value: 0
      unit: USD
    energy:
      value: 0
      unit: ""
  osplt:
    name: OSPLT
    version: '[1.0,)'
    reference: osplt
    attributes:
      - osplt_id
      - osplt_serial
      - osplt_type
      - osplt_hw_version
      - osplt_sw_version
      - osplt_name
      - osplt_location
      - osplt_coverageArea
      - osplt_longitude
      - osplt_latitude
      - osplt_altitude
    price:
      value: 0
      unit: USD
    energy:
      value: 0
      unit: ""
  otrx:
    name: OTRX
    version: '[1.3,)'
    reference: otrx
    attributes:
      - otrx_id
      - otrx_serial
      - otrx_type
      - otrx_hw_version
      - otrx_sw_version
      - otrx_name
      - otrx_location
      - otrx_coverageArea
      - otrx_longitude
      - otrx_latitude
      - otrx_altitude
      - otrx_rf_optical_band_o1_status
      - otrx_rf_optical_band_o2_status
      - otrx_rf_optical_band_o3_status
      - otrx_rf_uplink_gain_o1_value
      - otrx_rf_uplink_gain_o2_value
      - otrx_rf_uplink_gain_o3_value
    price:
      value: 0
      unit: USD
    energy:
      value: 0
      unit: ""
  pdu:
    name: PDU
    version: '[1.2,)'
    reference: pdu
    attributes:
      - pdu_id
      - pdu_serial
      - pdu_type
      - pdu_hw_version
      - pdu_sw_version
      - pdu_name
      - pdu_location
      - pdu_coverageArea
      - pdu_longitude
      - pdu_latitude
      - pdu_altitude
      - pdu_active_alarm_psu_2_missing
      - pdu_active_alarm_psu_4_missing
      - pdu_active_alarm_psu_5_missing
    alarms:
      pdu_active_alarm_psu_2_missing:
        attributes:
          - pdu_active_alarm_psu_2_missing
        mapper: '%{resources.mappers.alarms}'
      pdu_active_alarm_psu_4_missing:
        attributes:
          - pdu_active_alarm_psu_4_missing
        mapper: '%{resources.mappers.alarms}'
      pdu_active_alarm_psu_5_missing:
        attributes:
          - pdu_active_alarm_psu_5_missing
        mapper: '%{resources.mappers.alarms}'
    price:
      value: 0
      unit: USD
    energy:
      value: 0
      unit: ""
  poi:
    name: POI
    version: '[1.12,)'
    reference: poi
    attributes:
      - poi_id
      - poi_serial
      - poi_type
      - poi_hw_version
      - poi_sw_version
      - poi_name
      - poi_location
      - poi_coverageArea
      - poi_longitude
      - poi_latitude
      - poi_altitude
      - poi_rf_dl_gain_das_dl_1_value
      - poi_rf_dl_gain_das_dl_2_value
      - poi_rf_dl_generator_label
      - poi_rf_dl_generator_frequ
      - poi_rf_dl_generator_power
      - poi_rf_dl_generator_act_time
      - poi_rf_ul_gain_das_ul_1_value
      - poi_rf_ul_gain_das_ul_2_value
      - poi_rf_path_bts1_dl_status
      - poi_rf_path_bts2_dl_status
      - poi_rf_path_bts1_ul_status
      - poi_rf_path_bts2_ul_status
      - poi_active_alarm_internal_data_inconsistency
    alarms:
      poi_active_alarm_internal_data_inconsistency:
        attributes:
          - poi_active_alarm_internal_data_inconsistency
        mapper: '%{resources.mappers.alarms}'
    price:
      value: 0
      unit: USD
    energy:
      value: 0
      unit: ""
  ru:
    name: RU
    version: '[1.0,)'
    reference: ru
    attributes:
      - ru_id
      - ru_serial
      - ru_type
      - ru_hw_version
      - ru_sw_version
      - ru_name
      - ru_location
      - ru_coverageArea
      - ru_longitude
      - ru_latitude
      - ru_altitude
      - ru_rf_dl_usa_700_750_gain_value
      - ru_rf_dl_aws_1700_gain_value
      - ru_rf_dl_pcs_1900_gain_value
      - ru_rf_dl_smr_800_cel_850_gain_value
      - ru_rf_ul_label
      - ru_rf_ul_freq
      - ru_rf_ul_power
      - ru_rf_ul_act_time
      - ru_rf_pa_1_status
      - ru_rf_pa_2_status
      - ru_rf_pa_3_status
      - ru_rf_pa_4_status
      - ru_alarm_ul_alc_otrx_band_1_active
      - ru_alarm_ul_alc_otrx_band_2_active
      - ru_alarm_communication_failure
    alarms:
      ru_alarm_communication_failure:
        attributes:
          - ru_alarm_communication_failure
        mapper: '%{resources.mappers.alarms}'
      ru_alarm_ul_alc_otrx_band_1_active:
        attributes:
          - ru_alarm_ul_alc_otrx_band_1_active
        mapper: '%{resources.mappers.alarms}'
      ru_alarm_ul_alc_otrx_band_2_active:
        attributes:
          - ru_alarm_ul_alc_otrx_band_2_active
        mapper: '%{resources.mappers.alarms}'
    price:
      value: 0
      unit: USD
    energy:
      value: 0
      unit: ""
  smhw:
    name: Site Manager
    version: '[1.0,)'
    reference: smhw
    attributes:
      - smhw_id
      - smhw_serial
      - smhw_type
      - smhw_hw_version
      - smhw_sw_version
      - smhw_name
      - smhw_location
      - smhw_coverageArea
      - smhw_longitude
      - smhw_latitude
      - smhw_altitude
    price:
      value: 0
      unit: USD
    energy:
      value: 0
      unit: ""
  smtx:
    name: SRC
    version: '[1.1,)'
    reference: smtx
    attributes:
      - smtx_id
      - smtx_serial
      - smtx_type
      - smtx_hw_version
      - smtx_sw_version
      - smtx_name
      - smtx_location
      - smtx_coverageArea
      - smtx_longitude
      - smtx_latitude
      - smtx_altitude
    price:
      value: 0
      unit: USD
    energy:
      value: 0
      unit: ""
  src:
    name: SRC
    version: '[1.2,)'
    reference: src
    attributes:
      - src_id
      - src_serial
      - src_type
      - src_hw_version
      - src_sw_version
      - src_name
      - src_location
      - src_coverageArea
      - src_longitude
      - src_latitude
      - src_altitude
      - src_active_alarm_communication_failure
    alarms:
      src_active_alarm_communication_failure:
        attributes:
          - src_active_alarm_communication_failure
        mapper: '%{resources.mappers.alarms}'
    price:
      value: 0
      unit: USD
    energy:
      value: 0
      unit: ""
  system:
    name: System
    version: '[1.0,)'
    reference: system
    price:
      value: 0
      unit: USD
    energy:
      value: 0
      unit: ""
  zcmb:
    name: SRC
    version: '[1.0,)'
    reference: zcmb
    attributes:
      - zcmb_id
      - zcmb_serial
      - zcmb_type
      - zcmb_hw_version
      - zcmb_sw_version
      - zcmb_name
      - zcmb_location
      - zcmb_coverageArea
      - zcmb_longitude
      - zcmb_latitude
      - zcmb_altitude
      - zcmb_rf_bts_zone_dl1_ul1_status
      - zcmb_rf_bts_zone_dl2_ul2_status
      - zcmb_rf_bts_zone_dl3_ul3_status
      - zcmb_rf_bts_zone_dl4_ul4_status
      - zcmb_rf_bts_zone_dl5_ul5_status
      - zcmb_rf_bts_zone_dl6_ul6_status
      - zcmb_rf_bts_zone_dl7_ul7_status
      - zcmb_rf_bts_zone_dl8_ul8_status
      - zcmb_rf_mob_otrx_dl1_ul1_status
      - zcmb_rf_mob_otrx_dl2_ul2_status
      - zcmb_rf_mob_otrx_dl3_ul3_status
      - zcmb_rf_mob_otrx_dl4_ul4_status
      - zcmb_rf_mob_otrx_dl5_ul5_status
      - zcmb_rf_mob_otrx_dl6_ul6_status
      - zcmb_rf_mob_otrx_dl7_ul7_status
      - zcmb_rf_mob_otrx_dl8_ul8_status
    price:
      value: 0
      unit: USD
    energy:
      value: 0
      unit: ""
attributes:
  ifc_altitude:
    name: Unit Altitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.altitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ifc_coverage_area:
    name: Unit Coverage Area
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: gjson
        expression: settings.hm_coverageArea
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ifc_coverageArea:
    attributes:
      dataSource: '%{resources.http.requests.get_info}'
  ifc_hw_version:
    name: Unit Hardware Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hwVersion
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
      write:
        type: object
        properties: {}
  ifc_id:
    name: Unit ID
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.id
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ifc_latitude:
    name: Unit Latitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_latitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ifc_location:
    name: Unit Location
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.location
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ifc_longitude:
    name: Unit Longitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_longitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ifc_name:
    name: Unit Name
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.name
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ifc_serial:
    name: Unit Serial Number
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.serial
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ifc_sw_version:
    name: Unit Software Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.swVersion
      extractor:
        filters:
          1: regexpReplace /^(\d+\.\d+)\.?.*$/ => $1
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ifc_type:
    name: Unit Type
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.type
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  osplt_altitude:
    name: Unit Altitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.altitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  osplt_coverage_area:
    name: Unit Coverage Area
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: gjson
        expression: settings.hm_coverageArea
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  osplt_coverageArea:
    attributes:
      dataSource: '%{resources.http.requests.get_info}'
  osplt_hw_version:
    name: Unit Hardware Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hwVersion
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
      write:
        type: object
        properties: {}
  osplt_id:
    name: Unit ID
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.id
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  osplt_latitude:
    name: Unit Latitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_latitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  osplt_location:
    name: Unit Location
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.location
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  osplt_longitude:
    name: Unit Longitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_longitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  osplt_name:
    name: Unit Name
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.name
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  osplt_serial:
    name: Unit Serial Number
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.serial
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  osplt_sw_version:
    name: Unit Software Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.swVersion
      extractor:
        filters:
          1: regexpReplace /^(\d+\.\d+)\.?.*$/ => $1
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  osplt_type:
    name: Unit Type
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.type
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  otrx_altitude:
    name: Unit Altitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.altitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  otrx_coverage_area:
    name: Unit Coverage Area
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: gjson
        expression: settings.hm_coverageArea
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  otrx_coverageArea:
    attributes:
      dataSource: '%{resources.http.requests.get_info}'
  otrx_hw_version:
    name: Unit Hardware Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hwVersion
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
      write:
        type: object
        properties: {}
  otrx_id:
    name: Unit ID
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.id
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  otrx_latitude:
    name: Unit Latitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_latitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  otrx_location:
    name: Unit Location
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.location
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  otrx_longitude:
    name: Unit Longitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_longitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  otrx_name:
    name: Unit Name
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.name
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  otrx_rf_optical_band_o1_status:
    name: Optical Band O1 (300 - 1000) MHz Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.data.#(uniqueLabel.#(=="O_1"))#.colValues.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
        unit: MHz
      write:
        type: object
        properties: {}
  otrx_rf_optical_band_o2_status:
    name: Optical Band O2 (1805 - 2200) MHz Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.data.#(uniqueLabel.#(=="O_2"))#.colValues.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
        unit: MHz
      write:
        type: object
        properties: {}
  otrx_rf_optical_band_o3_status:
    name: Optical Band O3 (2345 - 2700) MHz Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.data.#(uniqueLabel.#(=="O_3"))#.colValues.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
        unit: MHz
      write:
        type: object
        properties: {}
  otrx_rf_uplink_gain_o1_value:
    name: Uplink Gain Offset O1 (300 - 1000) MHz Value
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.data.#(uniqueLabel.#(=="O_1;1"))#.colValues.currVal
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: Int32
        unit: MHz
      write:
        type: object
        properties: {}
  otrx_rf_uplink_gain_o2_value:
    name: Uplink Gain Offset O2 (1710 - 2200) MHz Value
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.data.#(uniqueLabel.#(=="O_2;1"))#.colValues.currVal
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: Int32
        unit: MHz
      write:
        type: object
        properties: {}
  otrx_rf_uplink_gain_o3_value:
    name: Uplink Gain Offset O3 (2305 - 2700) MHz
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.data.#(uniqueLabel.#(=="O_3;1"))#.colValues.currVal
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: Int32
        unit: MHz
      write:
        type: object
        properties: {}
  otrx_serial:
    name: Unit Serial Number
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.serial
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  otrx_sw_version:
    name: Unit Software Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.swVersion
      extractor:
        filters:
          1: regexpReplace /^(\d+\.\d+)\.?.*$/ => $1
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  otrx_type:
    name: Unit Type
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.type
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_active_alarm_psu_2_missing:
    name: PSU 2 Missing
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: snmpTrap
        expression: ''
      extractor:
        mapper: '%{resources.mappers.alarms}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_active_alarm_psu_4_missing:
    name: PSU 2 Missing
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: snmpTrap
        expression: ''
      extractor:
        mapper: '%{resources.mappers.alarms}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_active_alarm_psu_5_missing:
    name: PSU 2 Missing
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: snmpTrap
        expression: ''
      extractor:
        mapper: '%{resources.mappers.alarms}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_altitude:
    name: Unit Altitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.altitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_coverage_area:
    name: Unit Coverage Area
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: gjson
        expression: settings.hm_coverageArea
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_coverageArea:
    attributes:
      dataSource: '%{resources.http.requests.get_info}'
  pdu_hw_version:
    name: Unit Hardware Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hwVersion
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
      write:
        type: object
        properties: {}
  pdu_id:
    name: Unit ID
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.id
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_latitude:
    name: Unit Latitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_latitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_location:
    name: Unit Location
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.location
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_longitude:
    name: Unit Longitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_longitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_name:
    name: Unit Name
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.name
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_serial:
    name: Unit Serial Number
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.serial
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_sw_version:
    name: Unit Software Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.swVersion
      extractor:
        filters:
          1: regexpReplace /^(\d+\.\d+)\.?.*$/ => $1
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  pdu_type:
    name: Unit Type
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.type
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  poi_active_alarm_internal_data_inconsistency:
    name: Internal Data Inconsistency
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: snmpTrap
        expression: ''
      extractor:
        mapper: '%{resources.mappers.alarms}}'
    properties:
      readWrite: R
      read:
        type: Float
      write:
        type: object
        properties: {}
  poi_altitude:
    name: Unit Altitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.altitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  poi_coverage_area:
    name: Unit Coverage Area
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: gjson
        expression: settings.hm_coverageArea
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  poi_coverageArea:
    attributes:
      dataSource: '%{resources.http.requests.get_info}'
  poi_hw_version:
    name: Unit Hardware Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hwVersion
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
      write:
        type: object
        properties: {}
  poi_id:
    name: Unit ID
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.id
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  poi_latitude:
    name: Unit Latitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_latitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  poi_location:
    name: Unit Location
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.location
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  poi_longitude:
    name: Unit Longitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_longitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  poi_name:
    name: Unit Name
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.name
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  poi_rf_dl_gain_das_dl_1_value:
    name: DAS DL 1 Value
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.attenuationData.attenuations.#(label.#(=="DAS DL 1"))#.currentVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
        unit: dB
      write:
        type: object
        properties: {}
  poi_rf_dl_gain_das_dl_2_value:
    name: DAS DL 2 Value
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.attenuationData.attenuations.#(label.#(=="DAS DL 2"))#.currentVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
        unit: dB
      write:
        type: object
        properties: {}
  poi_rf_dl_generator_act_time:
    name: DL Generator Activation Time
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.generatorData.#(index.#(=="0"))#.activationTime.currentVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
        unit: Mins
      write:
        type: object
        properties: {}
  poi_rf_dl_generator_frequ:
    name: DL Generator Frequency
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.generatorData.#(index.#(=="0"))#.frequency.currentVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
        unit: MHz
      write:
        type: object
        properties: {}
  poi_rf_dl_generator_label:
    name: DL Generator Path
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.generatorData.#(index.#(=="0"))#.PL1
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  poi_rf_dl_generator_power:
    name: DL Generator Power
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.generatorData.#(index.#(=="0"))#.power.currentVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
        unit: dBm
      write:
        type: object
        properties: {}
  poi_rf_path_bts1_dl_status:
    name: BTS 1 DL Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.pathStatusData.#(primary.#(=="BTS 1 DL"))#.status
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
      write:
        type: object
        properties: {}
  poi_rf_path_bts1_ul_status:
    name: BTS 1 UL Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.pathStatusData.#(primary.#(=="BTS 1 uL"))#.status
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: Float
      write:
        type: object
        properties: {}
  poi_rf_path_bts2_dl_status:
    name: BTS 2 DL Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.pathStatusData.#(primary.#(=="BTS 2 DL"))#.status
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: Float
      write:
        type: object
        properties: {}
  poi_rf_path_bts2_ul_status:
    name: BTS 2 UL Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.pathStatusData.#(primary.#(=="BTS 2 UL"))#.status
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: Float
      write:
        type: object
        properties: {}
  poi_rf_ul_gain_das_ul_1_value:
    name: DAS UL 1 Gain Value
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.attenuationData.attenuations.#(label.#(=="DAS UL 1"))#.currentVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
        unit: dB
      write:
        type: object
        properties: {}
  poi_rf_ul_gain_das_ul_2_value:
    name: DAS UL 2 Gain Value
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_att}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.ipoi.content.attenuationData.attenuations.#(label.#(=="DAS UL 2"))#.currentVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
        unit: dB
      write:
        type: object
        properties: {}
  poi_serial:
    name: Unit Serial Number
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.serial
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  poi_sw_version:
    name: Unit Software Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.swVersion
      extractor:
        filters:
          1: regexpReplace /^(\d+\.\d+)\.?.*$/ => $1
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  poi_type:
    name: Unit Type
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.type
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_alarm_communication_failure:
    name: Communication Failure
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: snmpTrap
        expression: ''
      extractor:
        mapper: '%{resources.mappers.alarms}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_alarm_ul_alc_otrx_band_1_active:
    name: UL RF Interference - ANT
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: snmpTrap
        expression: ''
      extractor:
        mapper: '%{resources.mappers.alarms}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_alarm_ul_alc_otrx_band_2_active:
    name: UL RF Interference - ANT
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: snmpTrap
        expression: ''
      extractor:
        mapper: '%{resources.mappers.alarms}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_altitude:
    name: Unit Altitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.altitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_coverage_area:
    name: Unit Coverage Area
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: gjson
        expression: settings.hm_coverageArea
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_coverageArea:
    attributes:
      dataSource: '%{resources.http.requests.get_info}'
  ru_hw_version:
    name: Unit Hardware Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hwVersion
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
      write:
        type: object
        properties: {}
  ru_id:
    name: Unit ID
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.id
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_latitude:
    name: Unit Latitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_latitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_location:
    name: Unit Location
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.location
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_longitude:
    name: Unit Longitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_longitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_name:
    name: Unit Name
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.name
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_rf_dl_aws_1700_gain_value:
    name: DL AWS 1700 Gain Value
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="R_US_17;1"))#.colValues.currVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
        unit: dB
      write:
        type: object
        properties: {}
  ru_rf_dl_pcs_1900_gain_value:
    name: DL PCS 1900 Gain Value
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="R_US_19;1"))#.colValues.currVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
        unit: dB
      write:
        type: object
        properties: {}
  ru_rf_dl_smr_800_cel_850_gain_value:
    name: DL SMR 800 / Cell 850 Gain Value
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="R_US_80-85;1"))#.colValues.currVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
        unit: dB
      write:
        type: object
        properties: {}
  ru_rf_dl_usa_700_750_gain_value:
    name: DL USA 700/750 Gain Value
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="R_US_07;1"))#.colValues.currVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
        unit: dB
      write:
        type: object
        properties: {}
  ru_rf_pa_1_status:
    name: PA 1 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.amplifiers.#(paId.#(=="PA 1"))#.State
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_rf_pa_2_status:
    name: PA 2 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.amplifiers.#(paId.#(=="PA 2"))#.State
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_rf_pa_3_status:
    name: PA 3 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.amplifiers.#(paId.#(=="PA 3"))#.State
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_rf_pa_4_status:
    name: PA 4 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.amplifiers.#(paId.#(=="PA 4"))#.State
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_rf_ul_act_time:
    name: UL Activation Time
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.data.paths.*.data.actTme.currVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
        unit: Mins
      write:
        type: object
        properties: {}
  ru_rf_ul_freq:
    name: UL Frequency
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.data.paths.*.data.freq.currVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
        unit: MHz
      write:
        type: object
        properties: {}
  ru_rf_ul_label:
    name: UL Label
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.data.paths.*.data.label
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_rf_ul_power:
    name: UL Power
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.data.paths.*.data.power.currVal
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Float
        unit: dBm
      write:
        type: object
        properties: {}
  ru_serial:
    name: Unit Serial Number
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.serial
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_sw_version:
    name: Unit Software Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.swVersion
      extractor:
        filters:
          1: regexpReplace /^(\d+\.\d+)\.?.*$/ => $1
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  ru_type:
    name: Unit Type
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.type
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smhw_altitude:
    name: Unit Altitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.altitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smhw_coverage_area:
    name: Unit Coverage Area
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: gjson
        expression: settings.hm_coverageArea
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smhw_coverageArea:
    attributes:
      dataSource: '%{resources.http.requests.get_info}'
  smhw_hw_version:
    name: Unit Hardware Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hwVersion
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
      write:
        type: object
        properties: {}
  smhw_id:
    name: Unit ID
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.id
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smhw_latitude:
    name: Unit Latitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_latitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smhw_location:
    name: Unit Location
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.location
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smhw_longitude:
    name: Unit Longitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_longitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smhw_name:
    name: Unit Name
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.name
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smhw_serial:
    name: Unit Serial Number
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.serial
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smhw_sw_version:
    name: Unit Software Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.swVersion
      extractor:
        filters:
          1: regexpReplace /^(\d+\.\d+)\.?.*$/ => $1
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smhw_type:
    name: Unit Type
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.type
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smtx_altitude:
    name: Unit Altitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.altitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smtx_coverage_area:
    name: Unit Coverage Area
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: gjson
        expression: settings.hm_coverageArea
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smtx_coverageArea:
    attributes:
      dataSource: '%{resources.http.requests.get_info}'
  smtx_hw_version:
    name: Unit Hardware Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hwVersion
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
      write:
        type: object
        properties: {}
  smtx_id:
    name: Unit ID
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.id
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smtx_latitude:
    name: Unit Latitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_latitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smtx_location:
    name: Unit Location
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.location
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smtx_longitude:
    name: Unit Longitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_longitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smtx_name:
    name: Unit Name
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.name
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smtx_serial:
    name: Unit Serial Number
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.serial
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smtx_sw_version:
    name: Unit Software Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.swVersion
      extractor:
        filters:
          1: regexpReplace /^(\d+\.\d+)\.?.*$/ => $1
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  smtx_type:
    name: Unit Type
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.type
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  src_active_alarm_communication_failure:
    name: Communication Failure
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: snmpTrap
        expression: ''
      extractor:
        mapper: '%{resources.mappers.alarms}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  src_altitude:
    name: Unit Altitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.altitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  src_coverage_area:
    name: Unit Coverage Area
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: gjson
        expression: settings.hm_coverageArea
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  src_coverageArea:
    attributes:
      dataSource: '%{resources.http.requests.get_info}'
  src_hw_version:
    name: Unit Hardware Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hwVersion
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
      write:
        type: object
        properties: {}
  src_id:
    name: Unit ID
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.id
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  src_latitude:
    name: Unit Latitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_latitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  src_location:
    name: Unit Location
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.location
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  src_longitude:
    name: Unit Longitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_longitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  src_name:
    name: Unit Name
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.name
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  src_serial:
    name: Unit Serial Number
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.serial
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  src_sw_version:
    name: Unit Software Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.swVersion
      extractor:
        filters:
          1: regexpReplace /^(\d+\.\d+)\.?.*$/ => $1
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  src_type:
    name: Unit Type
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.type
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_altitude:
    name: Unit Altitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.altitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_coverage_area:
    name: Unit Coverage Area
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      selector:
        type: gjson
        expression: settings.hm_coverageArea
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_coverageArea:
    attributes:
      dataSource: '%{resources.http.requests.get_info}'
  zcmb_hw_version:
    name: Unit Hardware Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hwVersion
      extractor: {}
    properties:
      readWrite: R
      read:
        type: Int32
      write:
        type: object
        properties: {}
  zcmb_id:
    name: Unit ID
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.id
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_latitude:
    name: Unit Latitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_latitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_location:
    name: Unit Location
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.location
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_longitude:
    name: Unit Longitude
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.hm_longitude
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_name:
    name: Unit Name
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.name
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_bts_zone_dl1_ul1_status:
    name: BTS Port Zone DL1 UL1 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="ZONE DL 1"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_bts_zone_dl2_ul2_status:
    name: BTS Port Zone DL2 UL2 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="ZONE DL 2"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_bts_zone_dl3_ul3_status:
    name: BTS Port Zone DL3 UL3 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="ZONE DL 3"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_bts_zone_dl4_ul4_status:
    name: BTS Port Zone DL4 UL4 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="ZONE DL 4"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_bts_zone_dl5_ul5_status:
    name: BTS Port Zone DL5 UL5 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="ZONE DL 5"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_bts_zone_dl6_ul6_status:
    name: BTS Port Zone DL6 UL6 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="ZONE DL 6"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_bts_zone_dl7_ul7_status:
    name: BTS Port Zone DL7 UL7 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="ZONE DL 7"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_bts_zone_dl8_ul8_status:
    name: BTS Port Zone DL8 UL8 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="ZONE DL 8"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_mob_otrx_dl1_ul1_status:
    name: MOB Port OTRX DL1 UL1 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="OTRX DL 1"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_mob_otrx_dl2_ul2_status:
    name: MOB Port OTRX DL2 UL2 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="OTRX DL 2"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_mob_otrx_dl3_ul3_status:
    name: MOB Port OTRX DL3 UL3 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="OTRX DL 3"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_mob_otrx_dl4_ul4_status:
    name: MOB Port OTRX DL4 UL4 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="OTRX DL 4"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_mob_otrx_dl5_ul5_status:
    name: MOB Port OTRX DL5 UL5 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="OTRX DL 5"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_mob_otrx_dl6_ul6_status:
    name: MOB Port OTRX DL6 UL6 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="OTRX DL 6"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_mob_otrx_dl7_ul7_status:
    name: MOB Port OTRX DL7 UL7 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="OTRX DL 7"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_rf_mob_otrx_dl8_ul8_status:
    name: MOB Port OTRX DL8 UL8 Status
    conditions: {}
    attributes:
      dependsOn:
        - '%{resources.http.requests.get_info}'
      dataEngine: '%{engines.upgraded-http}'
      dataSource: ${resources.http.requests.get_rf}
      selector:
        type: gjson
        expression: ${topology.discovery.flatten.loco}.rfparameters.content.result.data.#(uniqueLabel.#(=="OTRX DL 8"))#.portStatus
      extractor:
        mapper: '%{resources.mappers.onoff}}'
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_serial:
    name: Unit Serial Number
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.serial
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_sw_version:
    name: Unit Software Version
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.swVersion
      extractor:
        filters:
          1: regexpReplace /^(\d+\.\d+)\.?.*$/ => $1
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
  zcmb_type:
    name: Unit Type
    conditions: {}
    attributes:
      dataEngine: '%{engines.upgraded-http}'
      dataSource: '%{resources.http.requests.get_info}'
      selector:
        type: gjson
        expression: settings.type
      extractor: {}
    properties:
      readWrite: R
      read:
        type: String
      write:
        type: object
        properties: {}
resources:
  auths:
    upgraded-http:
      http:
        httpUri: false
        actions:
          login:
            dataEngine: '%{engines.upgraded-http}'
            dataSource: '%{resources.http.requests.login}'
            selector:
              type: cookie
              expression: SESS
            dataSink: '%{resources.globals.auth.sessionID}'
          logout:
            dataEngine: '%{engines.upgraded-http}'
            dataSource: '%{resources.http.requests.logout}'
            extractor: {}
            dataSink: '%{resources.globals.auth.sessionID}'
  functions:
    timestamp:
      filters:
        1: timestamp
  mappers:
    alarms:
      keyType: String
      valueType: String
      map:
        Clear: Normal
        Critical: Critical
        Major: Major
  globals:
    reg:
      ip: ${registration.form.properties.ip}
      password: ${registration.vault.properties.password}
      port: ${registration.form.properties.port}
      url: http://${registration.form.properties.ip}:${registration.form.properties.port}
      username: ${registration.vault.properties.username}
  http:
    requests:
      get_alarms:
        method: POST
        uri: ${resources.globals.reg.url}/batch
        requestContentType: application/json
        cookies:
          SESS: ${resources.globals.auth.sessionID}
        body:
          iot3:json-data: '{"x" : {"alarms":[{"a":"get","ttl":10,"id":726079,"p":{"sortColumn":"timestamp","sortDirection":"DESC","filterbyColumn":"","filterValues":[]}}]}}'
        responses:
          success:
            - dataSource: '%{response.header}'
              expression: Status-Code
              match: "200"
          failure:
            - dataSource: '%{response.header}'
              expression: Status-Code
              match: ^(?!200)
      get_att:
        method: POST
        uri: ${resources.globals.reg.url}/batch
        requestContentType: application/json
        cookies:
          SESS: ${resources.globals.auth.sessionID}
        body:
          ${topology.discovery.flatten.loco}:
            ipoi:
              - a: getAttenuation
                id: 639117
                p:
                  PL1:
                    - BTS 1 DL IN
                    - BTS 1 DL DPLX
                    - BTS 2 DL IN
                    - BTS 2 DL DPLX
                    - INT REF PT
                    - INT REF PT
                  PL2:
                    - INT REF PT
                    - INT REF PT
                    - INT REF PT
                    - INT REF PT
                    - DAS 1 DL OUT
                    - DAS 2 DL OUT
                  attenuationType: DL
                  ipoiName: ipoilpus
                ttl: 10
              - a: getGeneratorData
                id: 250001
                p:
                  PL1:
                    - BTS 1 DL IN
                    - BTS 1 DL DPLX
                    - BTS 2 DL IN
                    - BTS 2 DL DPLX
                  PL2:
                    - INT REF PT
                    - INT REF PT
                    - INT REF PT
                    - INT REF PT
                  attenuationType: DL
                ttl: 10
              - a: getAttenuation
                id: 62448
                p:
                  PL1:
                    - BTS 1 UL OUT
                    - BTS 1 UL DPLX
                    - BTS 2 UL OUT
                    - BTS 2 UL DPLX
                    - INT REF PT
                    - INT REF PT
                  PL2:
                    - INT REF PT
                    - INT REF PT
                    - INT REF PT
                    - INT REF PT
                    - DAS 1 UL IN
                    - DAS 2 UL IN
                  attenuationType: UL
                  ipoiName: ipoilpus
                ttl: 10
              - a: getPathStatus
                id: 717903
                p:
                  pLabel1:
                    - BTS 1 DL IN
                    - BTS 1 UL OUT
                    - BTS 1 UL/DL (DL)
                    - BTS 1 UL/DL (UL)
                    - BTS 2 DL IN
                    - BTS 2 UL OUT
                    - BTS 2 UL/DL (DL)
                    - BTS 2 UL/DL (UL)
                    - DAS 1 DL OUT
                    - DAS 1 UL IN
                    - DAS 2 DL OUT
                    - DAS 2 UL IN
                ttl: 10
              - a: getSVGPower
                id: 778606
                p:
                  direction: DL
                  portLabels:
                    - BTS 1 DL DPLX
                    - BTS 1 DL IN
                    - BTS 1 UL DPLX
                    - BTS 1 UL OUT
                    - BTS 2 DL DPLX
                    - BTS 2 DL IN
                    - BTS 2 UL DPLX
                    - BTS 2 UL OUT
                    - DAS 1 DL OUT
                    - DAS 1 UL IN
                    - DAS 2 DL OUT
                    - DAS 2 UL IN
                ttl: 10
              - a: getThresholdData
                id: 894041
                p:
                  PL1:
                    - BTS 1 DL DPLX
                    - BTS 1 DL IN
                    - BTS 2 DL DPLX
                    - BTS 2 DL IN
                    - DAS 1 DL OUT
                    - DAS 2 DL OUT
                  PL2:
                    - INT REF PT
                    - INT REF PT
                    - INT REF PT
                    - INT REF PT
                    - INT REF PT
                    - INT REF PT
                ttl: 10
        responses:
          success:
            - dataSource: '%{response.header}'
              expression: Status-Code
              match: "200"
          failure:
            - dataSource: '%{response.header}'
              expression: Status-Code
              match: ^(?!200)
      get_info:
        method: POST
        uri: ${resources.globals.reg.url}/batch
        requestContentType: application/json
        cookies:
          SESS: ${resources.globals.auth.sessionID}
        body:
          ${topology.discovery.flatten.loco}:
            device:
              - a: moduleInfo
                id: 276246
                p: {}
                ttl: 10
        responses:
          success:
            - dataSource: '%{response.header}'
              expression: Status-Code
              match: "200"
          failure:
            - dataSource: '%{response.header}'
              expression: Status-Code
              match: ^(?!200)
      get_rf:
        method: POST
        uri: ${resources.globals.reg.url}/batch
        requestContentType: application/json
        cookies:
          SESS: ${resources.globals.auth.sessionID}
        body:
          ${topology.discovery.flatten.loco}:
            rfparameters:
              - content:
                  checksum: e2784ed5
                  deviceType: ZC 8X8
                  schematicPath: ../../assets/img/svg/rfdiagrams/zcmb_8x8.svg
                id: 876687
                status: 200
              - content:
                  checksum: 2cdfcec6
                  result:
                    apex:
                      label: Port
                    data:
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 1
                            portAvailable: 1
                            portStatus: 1
                        displayLabel: ZONE DL 1;ZONE UL 1
                        uniqueLabel: ZONE DL 1
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 1
                            portAvailable: 1
                            portStatus: 1
                        displayLabel: ZONE DL 2;ZONE UL 2
                        uniqueLabel: ZONE DL 2
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 1
                            portAvailable: 1
                            portStatus: 1
                        displayLabel: ZONE DL 3;ZONE UL 3
                        uniqueLabel: ZONE DL 3
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 1
                            portAvailable: 1
                            portStatus: 1
                        displayLabel: ZONE DL 4;ZONE UL 4
                        uniqueLabel: ZONE DL 4
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 0
                            portAvailable: 1
                            portStatus: 0
                        displayLabel: ZONE DL 5;ZONE UL 5
                        uniqueLabel: ZONE DL 5
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 0
                            portAvailable: 1
                            portStatus: 0
                        displayLabel: ZONE DL 6;ZONE UL 6
                        uniqueLabel: ZONE DL 6
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 0
                            portAvailable: 1
                            portStatus: 0
                        displayLabel: ZONE DL 7;ZONE UL 7
                        uniqueLabel: ZONE DL 7
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 0
                            portAvailable: 1
                            portStatus: 0
                        displayLabel: ZONE DL 8;ZONE UL 8
                        uniqueLabel: ZONE DL 8
                    meta:
                      cols: 1
                      rows: 8
                    response:
                      error:
                        error_code: 401
                        has_error: 0
                id: 733463
                status: 200
              - content:
                  checksum: 0800fd55
                  result:
                    apex:
                      label: Port
                    data:
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 1
                            portAvailable: 1
                            portStatus: 1
                        displayLabel: OTRX DL 1;OTRX UL 1
                        uniqueLabel: OTRX DL 1
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 0
                            portAvailable: 1
                            portStatus: 0
                        displayLabel: OTRX DL 2;OTRX UL 2
                        uniqueLabel: OTRX DL 2
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 0
                            portAvailable: 1
                            portStatus: 0
                        displayLabel: OTRX DL 3;OTRX UL 3
                        uniqueLabel: OTRX DL 3
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 0
                            portAvailable: 1
                            portStatus: 0
                        displayLabel: OTRX DL 4;OTRX UL 4
                        uniqueLabel: OTRX DL 4
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 0
                            portAvailable: 1
                            portStatus: 0
                        displayLabel: OTRX DL 5;OTRX UL 5
                        uniqueLabel: OTRX DL 5
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 0
                            portAvailable: 1
                            portStatus: 0
                        displayLabel: OTRX DL 6;OTRX UL 6
                        uniqueLabel: OTRX DL 6
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 0
                            portAvailable: 1
                            portStatus: 0
                        displayLabel: OTRX DL 7;OTRX UL 7
                        uniqueLabel: OTRX DL 7
                      - colValues:
                          - error: 0
                            issue: 0
                            label: Status
                            oldValue: 0
                            portAvailable: 1
                            portStatus: 0
                        displayLabel: OTRX DL 8;OTRX UL 8
                        uniqueLabel: OTRX DL 8
                    meta:
                      cols: 1
                      rows: 8
                    response:
                      error:
                        error_code: 401
                        has_error: 0
                id: 425708
                status: 200
        responses:
          success:
            - dataSource: '%{response.header}'
              expression: Status-Code
              match: "200"
          failure:
            - dataSource: '%{response.header}'
              expression: Status-Code
              match: ^(?!200)
      get_tree:
        method: POST
        uri: ${resources.globals.reg.url}/batch
        requestContentType: application/json
        cookies:
          SESS: ${resources.globals.auth.sessionID}
        body:
          iot3:json-data: '{"x" : {"ion":[{"a":"getNotificationsCount","ttl":10,"id":570957,"p":{}}],"setup":[{"a":"getSystemstate","ttl":10,"id":754093,"p":{"disableStateUpdate":0}}],"tree":[{"a":"get","ttl":10,"id":252452,"p":{}}],"alarms":[{"a":"get","ttl":10,"id":28791,"p":{"sortColumn":"timestamp","sortDirection":"DESC","filterbyColumn":"","filterValues":[]}}]}}'
        responses:
          success:
            - dataSource: '%{response.header}'
              expression: Status-Code
              match: "200"
          failure:
            - dataSource: '%{response.header}'
              expression: Status-Code
              match: ^(?!200)
      login:
        method: POST
        uri: ${resources.globals.reg.url}/batch
        requestContentType: application/json
        body:
          iot3:json-data: '{"x" : {"login":[{"a":"login","ttl":10,"id":463623,"p":{"login":"${resources.globals.reg.username}","password":"${resources.globals.reg.password}","expire":!{template.filters.functions.timestamp}}}]}}'
        responses:
          success:
            - dataSource: '%{response.body}'
              type: gjson
              expression: success
              match: "true"
          failure:
            - dataSource: '%{response.body}'
              expression: status
              match: "401"
      logout:
        method: POST
        uri: ${resources.globals.reg.url}/batch
        requestContentType: application/json
        body:
          iot3:json-data: '{"x" : {"login":[{"a":"logout","ttl":10,"id":407473,"p":{}}]}}'
        responses:
          success:
            - dataSource: '%{response.body}'
              type: gjson
              expression: success
              match: "true"
          failure:
            - dataSource: '%{response.body}'
              expression: ""
              match: ""
